---
layout: post
title: "Racket 101"
date: 2013-06-18 09:51
comments: true
categories: [racket, programming]
published: false
---

Research Plan
-------------

* Watch some more PL course videos
* Get an alternative history of LISP/Racket to the one from the RealmOfRacket
* correnspondance between ease of creating LISP dialects and Racket platform language extensibility

This is a brief introduction to Racket that I'm writing as I learn it.

http://imgs.xkcd.com/comics/lisp.jpg
{% img http://imgs.xkcd.com/comics/lisp.jpg %}

History of Lisp
----------------

Lambda calculus - 1930s Alonzo Church

A950 Job McCarthy MIT found papers by AC

LISP is list centric and very simple

Ease of writing a LISP interpreter lead to many implementations and dialects of LISP.



What is Racket?
---------------

``` racket Language declaration
#lang racket
```
Racket is a dialect of LISP (List .  LISP started out as a research language devised by John Macarthy in 1956 (1956!!!), although the language wasn't implemented until a little later than that. LISP proved so compelling and easy to implement that many implementations and dialects were created.  One such dinalect was Scheme which eventually turned into Racket.

The first thing most people notice about LISP is it's strange and somewhat impractical looking syntax.

``` racket 3 Parentheses Everywhere

(+ 1 2)

(+ 1 (* 2 3))

(define (map fn list)
  (cond [(empty? list) empty]
        [else
         (cons (fn (car list)) (map fn (cdr list)))]))

```

All those parens bunched up and nested within each other might seem awkward at first, you quickly become accustomed to it. An editor or an IDE which can do paren matching also helps.

The great advantage of the LISP syntax is its simplcity. A LISP program closely resembles the AST generated by the compiler and so it's very easy to understand how the program will be evaluated at run time.  This is a nice contrast to the way a languages like Scala which have neat and flexible syntax, but can sometimes be difficult to reason about since the semantics of the expressions are not always clear.  No such problem with LISPs as the meaning jumps right out of the editor.

To avoid confusion, from now on this article will talk exclusively about racket although much of it will also apply to other LISP dialects.

Racket requries a language declaration. Racket supports multiple languages? Macros blah. Don't need to be lisp-like. Desktop of tools. Racket is a set of tools - not quite. Desktop has powerpoint, but can't change it easily.  Desktop of tools to write programs.  Everything is a program. Programmer wants to write programs to do things.

Wishes. Allows multiple languages. A language that lets you write programming languages.

* everything is a program
* Concpets are constructs in the programming language
* programming language is extensible

Pictures are values.


Different langs:

Can choose how file is parsed.  Not all languages support swithing languages within the stream.

*links?*
* racket
* roman numeral - macro extension, pattern matching macro
* racket/class - starts with racket and adds class syntax (implemented as a library)
* bsl - almost the same but (1 + 2) has a better error message
* typed/racket - adds static types
* scribble - for writing docs, mostly write in prose
* honu - javascript syntax
* frtime - async programming signalling


Define
------

'+' is a function
Function call '(' + name of function + arguments +')'

``` racket 3 versions of cube verbatim from pl
(define x 3)

(define cube1
	(lambda (x)
		(* x (* x x))))

(define cube2
	(lambda (x)
		(* x x x)))		

;syntactic sugar
(define (cube2 x)	
	(* x x x))
```

Racket Constructs
-----------------

[] is the same as () - easy to turn syntax into a syntax tree (parsing)

### Term

* primitive atom #t, #f, 2, "Foo" x
* special form define, lambda, if - body has runes specific to the special form.
* sequence of terms (t1 t2 t3 ... tn) is this where 'list' in lisp comes from?
	* if t1 
	* if t1 is not special form or atom then it is a function call


Dr

Hello World (and others) in Racket  
----------------------------------

``` racket Expressions
	"Hello World"

	(+ 1 2)

	(* 3 4)

	(+ 1 (* 3 2))

	(define (some-foo x)
	  (* 3 x))
```


* dialect of List, descant of scheme - links
* DrRacket





Foo bar

* foo
* bar

